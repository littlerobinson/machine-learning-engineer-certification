import numpy as np
import pandas as pd
import plotly.express as px
import plotly.figure_factory as ff
import plotly.graph_objects as go
import streamlit as st
from functions import statistics
from plotly.subplots import make_subplots


#############################################################################
#   Functions
#############################################################################
def get_threshold_slider():
    with st.sidebar:
        # Slider to set delay threshold
        return st.slider(
            "Select delay threshold (in minutes)",
            0,
            THRESHOLD_MINUTE_MAX,
            step=5,
        )


@st.cache_data
def load_delay_analysis_data():
    data = pd.read_excel("./src/data/get_around_delay_analysis.xlsx")
    # Change columns names to lowercase
    data.rename(lambda x: str(x).lower(), axis="columns", inplace=True)
    return data


def group_by_delay(minutes):
    if minutes < 0:
        val = "0. Pas de retard"
    elif minutes < 15:
        val = "1. Retard < 15 min"
    elif minutes < 60:
        val = "2. 15 ‚â§ Retard < 60 min"
    elif minutes >= 60:
        val = "4. Retard ‚â• 60 min"
    return val


def prepare_data(data):
    delay_map = data.set_index("rental_id")["delay_at_checkout_in_minutes"].to_dict()
    data["previous_ended_rental_delay_at_checkout"] = data[
        "previous_ended_rental_id"
    ].apply(lambda x: delay_map.get(x, None))
    data[data["state"] == "canceled"].head(20)

    data["profit"] = data["delay_at_checkout_in_minutes"].apply(
        lambda x: "%.2f" % (x * float(MEDIAN_MINUTE_PRICE))
    )
    data["profit"] = data["profit"].astype(float)
    data["delay"] = (
        data["delay_at_checkout_in_minutes"].dropna().apply(lambda x: group_by_delay(x))
    )
    return data


#############################################################################
#   Global variable
#############################################################################
# Price per minutes for location (calculate in notebook)
MEDIAN_DAY_PRICE = 119
MEDIAN_MINUTE_PRICE = 1.98
THRESHOLD_MINUTE_MAX = 400

#############################################################################
#   IHM
#############################################################################
if __name__ == "__main__":
    st.set_page_config(layout="wide")

    with st.sidebar:
        st.header("üöÄ Getaround")

    st.title("üöÄ Getaround")

    stats_tab, answers_tab = st.tabs(["stats", "answers"])
    with stats_tab:
        st.header("statistiques")

        st.markdown(
            """
        GetAround est le Airbnb des voitures. Vous pouvez louer des voitures √† n'importe qui pour quelques heures ou quelques jours ! Fond√©e en 2009, cette entreprise a connu une croissance rapide. En 2019, elle compte plus de 5 millions d'utilisateurs et environ 20 000 voitures disponibles dans le monde.

        En tant que partenaire de Jedha, ils ont propos√© de grands d√©fis :

        Pour cette √©tude de cas, nous vous sugg√©rons de vous mettre √† notre place et d'ex√©cuter une analyse que nous avons r√©alis√©e en 2017 üîÆ ü™Ñ

        En utilisant Getaround, les conducteurs r√©servent des voitures pour une dur√©e d√©termin√©e, allant d'une heure √† plusieurs jours. Ils sont cens√©s rendre la voiture √† temps, mais il arrive parfois que les conducteurs soient en retard pour la restitution.

        Les retours tardifs √† la caisse peuvent g√©n√©rer de fortes frictions pour le conducteur suivant si la voiture √©tait cens√©e √™tre relou√©e le m√™me jour : le service client signale souvent des utilisateurs insatisfaits car ils ont d√ª attendre le retour de la voiture de la location pr√©c√©dente ou des utilisateurs qui ont m√™me d√ª annuler leur location car la voiture n'a pas √©t√© restitu√©e √† temps.

        **Objectifs** üéØ

        Afin de limiter ces probl√®mes, nous avons d√©cid√© de mettre en place un d√©lai minimum entre deux locations. Une voiture ne sera pas affich√©e dans les r√©sultats de recherche si les heures d'arriv√©e ou de d√©part demand√©es sont trop proches d'une location d√©j√† r√©serv√©e.

        Cela r√©sout le probl√®me du retard de paiement, mais nuit √©galement potentiellement aux revenus de Getaround/des propri√©taires : nous devons trouver le bon compromis.
            """
        )

        # Create a text element and let the reader know the data is loading.
        with st.spinner("Loading and üß™ prepare data..."):
            data = load_delay_analysis_data()
            data = prepare_data(data=data)

        st.markdown("---")
        show_stats = st.checkbox("**Visualiser les statistiques basiques.**")
        if show_stats:
            st.markdown("## 1. Analyse Exploratoire des Donn√©es")

            st.markdown("**Donn√©es bruts:**")

            st.write(data)

            st.markdown("**Statistiques:**")

            stats = statistics.get_basics_statitics(data=data)
            for stat in stats.values():
                st.markdown(
                    f"**{stat[0]}**",
                )
                st.write(stat[1])

            st.markdown("---")

        # Distribution des d√©lais pour la r√©cup√©ration du v√©hicule
        total_counts = (
            data[data["delay"].notna()]
            .groupby("checkin_type")
            .size()
            .reset_index(name="total_count")
        )
        delay_counts = (
            data[data["delay"].notna()]
            .groupby(["delay", "checkin_type"])
            .size()
            .reset_index(name="count")
        )
        # Fusionner les DataFrames pour obtenir le total_count
        delay_counts = delay_counts.merge(total_counts, on="checkin_type")
        # Calculer le pourcentage de chaque cat√©gorie de d√©lai par checkin_type
        delay_counts["percentage"] = (
            delay_counts["count"] / delay_counts["total_count"]
        ) * 100
        # Cr√©er le graphique √† barres c√¥te √† c√¥te
        fig = px.bar(
            delay_counts,
            x="delay",
            y="percentage",
            color="checkin_type",
            barmode="group",
            title="Pourcentage des d√©lais par type d'enregistrement",
            labels={
                "delay": "Cat√©gorie de d√©lai",
                "percentage": "Pourcentage",
                "checkin_type": "Type enregistrement",
            },
        )
        fig.update_traces(texttemplate="%{y:.2f}%", textposition="inside")
        st.plotly_chart(fig, use_container_width=True)

        st.markdown("---")

    with answers_tab:
        # Filter late and canceled rentals
        late_rentals = data[
            (data["delay_at_checkout_in_minutes"] > 0) & (data["state"] == "ended")
        ]
        canceled_rentals = data[data["state"] == "canceled"]

        delay_threshold = get_threshold_slider()

        # Calcul de la perte
        delay_losses = late_rentals[
            late_rentals["delay_at_checkout_in_minutes"] >= delay_threshold
        ]["profit"].sum()

        # Affichage comme s'il y vait 3 colonnes
        col1, _ = st.columns([1, 3])

        with col1:
            st.markdown(
                f"""
                <div style="background-color: #FF4C4B; padding: 10px; border-radius: 5px;">
                    <h3 style="color: white; text-align: center;">Pertes total d√ª aux retards</h3>
                    <p style="color: white; font-size: 20px; text-align: center;">{delay_losses:.2f} ‚Ç¨</p>
                </div>
                """,
                unsafe_allow_html=True,
            )

        # Calculate estimated cost due to delay
        estimated_delay_cost = (
            late_rentals[
                late_rentals["delay_at_checkout_in_minutes"] >= delay_threshold
            ]["delay_at_checkout_in_minutes"].sum()
            * MEDIAN_MINUTE_PRICE
        )

        st.markdown("## 2. Questions")

        st.markdown("### 2.1. Quelle doit √™tre la dur√©e minimale du d√©lai ?")
        st.markdown(
            "### 2.2. Devrions-nous activer la fonctionnalit√© pour toutes les voitures ou uniquement pour les voitures connect√©es ?"
        )
        st.markdown(
            "### 2.3. Quelle part des revenus de notre propri√©taire serait potentiellement affect√©e par cette fonctionnalit√© ?"
        )
        st.markdown(
            "### 2.4. Combien de locations seraient affect√©es par la fonctionnalit√© en fonction du seuil et de la port√©e que nous choisissons ?"
        )
        st.markdown(
            "### 2.5. √Ä quelle fr√©quence les conducteurs sont-ils en retard pour le prochain contr√¥le technique ? Quel est l'impact sur le conducteur suivant ?"
        )
        st.markdown(
            "### 2.6. Combien de cas probl√©matiques cela permettra-t-il de r√©soudre en fonction du seuil et de la port√©e choisis ?"
        )
